[
  {
    "objectID": "doc.html",
    "href": "doc.html",
    "title": "test-webr-dashboard",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nlibrary(bslib)\n\n##functions\nlinspace &lt;- function(x1, x2, n = 100) {\n  stopifnot(is.numeric(x1), is.numeric(x2), length(x1) == 1, \n            length(x2) == 1)\n  n &lt;- floor(n)\n  if (n &lt;= 1) \n    x2\n  else seq(x1, x2, length.out = n)\n}\n\nlogseq &lt;- function(x1, x2, n = 100) {\n    x &lt;- linspace(log(abs(x1)), log(abs(x2)), n)\n    exp(x)\n}\n\nui &lt;- page_sidebar(\n  ## input selection\n  sidebar = sidebar(\n    selectInput(\"subcat\",\n                \"BMP Category:\",\n                c(\"Crop Management\" = \"Cropland\",\n                  \"Detention\" = \"Detention\",\n                  \"Drainage\" = \"Drainage\",\n                  \"Filtration\" = \"Filtration\",\n                  \"Infiltration\" = \"Infiltration\",\n                  \"Livestock Management\" = \"Livestock\",\n                  \"Treatment\" = \"Treatment\"),\n                selected = \"Livestock\")),\n  ## shows rendered output from shiny server\n  verbatimTextOutput(\"summary\",\n                     placeholder = TRUE),\n  ## shows prediction output\n  tableOutput(\"preds\")\n  \n)\n\n\nserver &lt;- function(input, output) {\n  \n  ## read data\n  df &lt;- read.csv(\"https://raw.githubusercontent.com/mps9506/test-webr-dashboard/main/data/data.csv\",\n                 colClasses = c(\"ValueID\" = \"character\",\n                                \"StudyID\" = \"character\",\n                                \"Pub_Year\" = \"factor\",\n                                \"Parameter\" = \"factor\",\n                                \"Source\" = \"factor\",\n                                \"Source_Type\" = \"factor\",\n                                \"BMP\" = \"factor\",\n                                \"BMP_ID\" = \"factor\",\n                                \"BMP_Class\" = \"factor\",\n                                \"BMP_Subcat\" = \"factor\",\n                                \"BMP_Category\" = \"factor\",\n                                \"Scale\" = \"factor\",\n                                \"Location\" = \"character\",\n                                \"State\" = \"factor\",\n                                \"Area\" = \"numeric\",\n                                \"Latitude\" = \"numeric\",\n                                \"Longitude\" = \"character\",\n                                \"Data_Year\" = \"character\",\n                                \"n\" = \"integer\", \n                                \"Pre\" = \"numeric\",\n                                \"Post\" = \"numeric\",\n                                \"Unit\" = \"character\",\n                                \"X..Reduction\" = \"NULL\",\n                                \"Log.Ratio\" = \"NULL\"),\n                 row.names = NULL)\n  df &lt;- df[!is.na(df$Pre) & !is.na(df$Post),]\n  min_pre &lt;- min(df$Pre, na.rm = TRUE)\n  max_pre &lt;- max(df$Pre, na.rm = TRUE)\n  new_data &lt;- data.frame(Pre = logseq(min_pre, max_pre, n = 100))\n  #critical value from t-dist for 90% ci\n  crit &lt;- qnorm(0.05, lower.tail = FALSE) \n\n  \n  ## choose variables and fit lm\n  model_output &lt;- reactive({\n    model_data &lt;- df[df$BMP_SubCat == input$subcat,]\n    m1 &lt;- lm(log(Post) ~ log(Pre),\n             data = model_data)\n    m1\n  })\n  \n  ## generate prediction data and ci\n  model_preds &lt;- reactive({\n    \n    y &lt;- predict(model_output(),\n            newdata = new_data,\n            se.fit = TRUE,\n            type = \"response\")\n    y &lt;- cbind(new_data, y)\n    y$response &lt;- exp(y$fit)\n    y$lower &lt;- exp(y$fit-crit*y$se)\n    y$upper &lt;- exp(y$fit+crit*y$se)\n    y\n  })\n  \n  ## render model summary output\n  output$summary &lt;- renderPrint({ \n    summary(model_output())\n  })\n  \n  ## render table out\n  output$preds &lt;- renderTable({\n    model_preds()\n  })\n  \n}\n\nshinyApp(ui = ui, server = server)"
  }
]