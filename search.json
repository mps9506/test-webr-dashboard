[
  {
    "objectID": "doc.html",
    "href": "doc.html",
    "title": "test-webr-dashboard",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nlibrary(bslib)\nlibrary(ggplot2)\n\n## set ggplot2 theme\ntheme_set(theme_bw() + theme(plot.title = element_text(face = \"bold\")))\n\n##functions\nlinspace &lt;- function(x1, x2, n = 100) {\n  stopifnot(is.numeric(x1), is.numeric(x2), length(x1) == 1, \n            length(x2) == 1)\n  n &lt;- floor(n)\n  if (n &lt;= 1) \n    x2\n  else seq(x1, x2, length.out = n)\n}\n\nlogseq &lt;- function(x1, x2, n = 100) {\n  x &lt;- linspace(log(abs(x1)), log(abs(x2)), n)\n  exp(x)\n}\n\nplot_card &lt;- function(header, ...) {\n  card(\n    full_screen = FALSE,\n    card_header(header, class = \"bg-dark\"),\n    card_body(...,\n              min_height = \"25vh\"),\n    max_height = \"50vh\",\n    fill = FALSE\n  )\n}\n\nui &lt;- page_sidebar(\n  ## input selection\n  sidebar = sidebar(\n    ## parameter selection\n    selectInput(\"param\",\n                \"Water Quality Parameter:\",\n                c(\"Fecal Indicator Bacteria\" = \"fib\")),\n    \n    ## subcategory selection\n    selectInput(\"subcat\",\n                \"BMP Category:\",\n                c(\"Crop Management\" = \"Cropland\",\n                  \"Detention\" = \"Detention\",\n                  \"Drainage\" = \"Drainage\",\n                  \"Filtration\" = \"Filtration\",\n                  \"Infiltration\" = \"Infiltration\",\n                  \"Livestock Management\" = \"Livestock\",\n                  \"Treatment\" = \"Treatment\"),\n                selected = \"Livestock\")#,\n    \n    # ## confidence slider\n    # sliderInput(\"ci\",\n    #             \"Confidence Intervals:\",\n    #             min = 80,\n    #             max = 99,\n    #             value = 90,\n    #             step = 1)\n    )#,\n  \n  ## shows rendered output from shiny server\n  # verbatimTextOutput(\"summary\",\n  #                    placeholder = TRUE)\n  # ## shows prediction output\n  # tableOutput(\"preds\"),\n  \n  ## plot one\n  \n  # layout_columns(\n  #   plot_card(\"Regression model\",\n  #             plotOutput(\"plot1\",\n  #                        height = \"30vh\",\n  #                        width = \"30vh\")),\n  #   plot_card(\"Predicted % reduction\",\n  #             plotOutput(\"plot2\",\n  #                        height = \"30vh\",\n  #                        width = \"30vh\"))\n  # )\n  \n)\n\n\nserver &lt;- function(input, output, session) {\n  \n  ## read data\n  df &lt;- read.csv(\"https://raw.githubusercontent.com/mps9506/test-webr-dashboard/main/data/data.csv\",\n                 colClasses = c(\"ValueID\" = \"character\",\n                                \"StudyID\" = \"character\",\n                                \"Pub_Year\" = \"factor\",\n                                \"Parameter\" = \"factor\",\n                                \"Source\" = \"factor\",\n                                \"Source_Type\" = \"factor\",\n                                \"BMP\" = \"factor\",\n                                \"BMP_ID\" = \"factor\",\n                                \"BMP_Class\" = \"factor\",\n                                \"BMP_Subcat\" = \"factor\",\n                                \"BMP_Category\" = \"factor\",\n                                \"Scale\" = \"factor\",\n                                \"Location\" = \"character\",\n                                \"State\" = \"factor\",\n                                \"Area\" = \"numeric\",\n                                \"Latitude\" = \"numeric\",\n                                \"Longitude\" = \"character\",\n                                \"Data_Year\" = \"character\",\n                                \"n\" = \"integer\", \n                                \"Pre\" = \"numeric\",\n                                \"Post\" = \"numeric\",\n                                \"Unit\" = \"character\",\n                                \"X..Reduction\" = \"NULL\",\n                                \"Log.Ratio\" = \"NULL\"),\n                 row.names = NULL)\n  df &lt;- df[!is.na(df$Pre) & !is.na(df$Post),]\n  min_pre &lt;- min(df$Pre, na.rm = TRUE)\n  max_pre &lt;- max(df$Pre, na.rm = TRUE)\n  new_data &lt;- data.frame(Pre = logseq(min_pre, max_pre, n = 100))\n  # #critical value from t-dist for 90% ci\n  # crit &lt;- reactive({\n  #   qnorm((1-(input$ci)/100)/2, lower.tail = FALSE) \n  # })\n  # \n  # ## should seperate model data and model fit here:\n  # model_data &lt;- reactive({\n  #   model_data &lt;- df[df$BMP_SubCat == input$subcat,]\n  # })\n  # \n  # ## fit lm\n  # model_output &lt;- reactive({\n  #   m1 &lt;- lm(log(Post) ~ log(Pre),\n  #            data = model_data())\n  #   m1\n  # })\n  # \n  # ## generate prediction data and ci\n  # model_preds &lt;- reactive({\n  #   \n  #   y &lt;- predict(model_output(),\n  #                newdata = new_data,\n  #                se.fit = TRUE,\n  #                type = \"response\")\n  #   y &lt;- cbind(new_data, y)\n  #   y$response &lt;- exp(y$fit)\n  #   y$lower &lt;- exp(y$fit-crit()*y$se)\n  #   y$upper &lt;- exp(y$fit+crit()*y$se)\n  #   y\n  # })\n  # \n  # ## p1 labels\n  # p1_lab &lt;- reactive({\n  #   if (input$param == \"fib\") {\n  #     list(x = \"Pre-treatment FIB (cfu/100mL)\",\n  #          y = \"Post-Treatment FIB (cfu/100mL)\")\n  #   }\n  # })\n  # \n  # \n  # ## render model summary output\n  # output$summary &lt;- renderPrint({ \n  #   summary(model_output())\n  # })\n  # \n  # ## render table out\n  # output$preds &lt;- renderTable({\n  #   model_preds()\n  # })\n  \n  \n  \n#   ## render plot 1\n#   output$plot1 &lt;- renderPlot({\n#     p1 &lt;- model_data() |&gt; \n#       ggplot() +\n#       geom_abline(slope = 1, linetype = \"dotted\", color = \"grey30\") +\n#       geom_point(aes(Pre, Post)) +\n#       geom_line(data = model_preds(),\n#                 aes(Pre, response)) +\n#       geom_ribbon(data = model_preds(),\n#                   aes(x = Pre,\n#                       ymin = lower,\n#                       ymax = upper),\n#                   alpha = 0.5) +\n#       scale_x_log10(name = p1_lab()$x, \n#                     labels = scales::label_log(digits = 1)) +\n#       scale_y_log10(name = p1_lab()$y,\n#                     labels = scales::label_log(digits = 1)) +\n#       coord_fixed(xlim = c(min_pre, max_pre),\n#                   ylim = c(min_pre, max_pre))\n#     p1\n#   },\n#   height = function() {\n#     session$clientData$output_plot1_width\n#   },\n#   res = 100)\n#   \n#   ## render plot2\n#   output$plot2 &lt;- renderPlot({\n#     p2 &lt;- model_preds() |&gt; \n#       ggplot() +\n#       geom_ribbon(aes(Pre, ymin = (Pre-lower)/Pre,\n#                       ymax = (Pre-upper)/Pre),\n#                   alpha = 0.5) +\n#       geom_line(aes(Pre, (Pre-response)/Pre)) +\n#       scale_x_log10(name = p1_lab()$x,\n#                     labels = scales::label_log(digits = 1)) +\n#       scale_y_continuous(name = \"Predicted % reduction\",\n#                          labels = scales::label_percent()) +\n#       coord_cartesian()\n#     \n#     p2\n#   },\n#   height = function() {\n#     session$clientData$output_plot2_width\n#   },\n#   res = 100)\n# }\n\nshinyApp(ui = ui, server = server)"
  }
]