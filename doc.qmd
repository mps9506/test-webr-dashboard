---
title: "test-webr-dashboard"
author: "Penguin Friend"
format:
  html:
    grid: 
      body-width: 1300px
    resources: 
      - shinylive-sw.js
filters: 
  - shinylive
---





```{shinylive-r}
#| standalone: true
#| viewerHeight: 800
library(shiny)
library(bslib)
library(ggplot2)
library(ragg)
## set ggplot2 theme
theme_set(theme_bw() + theme(plot.title = element_text(face = "bold")))

##functions
linspace <- function(x1, x2, n = 100) {
  stopifnot(is.numeric(x1), is.numeric(x2), length(x1) == 1, 
            length(x2) == 1)
  n <- floor(n)
  if (n <= 1) 
    x2
  else seq(x1, x2, length.out = n)
}

logseq <- function(x1, x2, n = 100) {
  x <- linspace(log(abs(x1)), log(abs(x2)), n)
  exp(x)
}

plot_card <- function(header, ...) {
  card(
    full_screen = FALSE,
    card_header(header, class = "bg-dark"),
    card_body(...,
              min_height = "25vh"),
    max_height = "50vh",
    fill = FALSE
  )
}

ui <- page_sidebar(
  ## input selection
  sidebar = sidebar(
    ## parameter selection
    selectInput("param",
                "Water Quality Parameter:",
                c("Fecal Indicator Bacteria" = "fib")),
    
    ## subcategory selection
    selectInput("subcat",
                "BMP Category:",
                c("Crop Management" = "Cropland",
                  "Detention" = "Detention",
                  "Drainage" = "Drainage",
                  "Filtration" = "Filtration",
                  "Infiltration" = "Infiltration",
                  "Livestock Management" = "Livestock",
                  "Treatment" = "Treatment"),
                selected = "Livestock"),
    
    ## confidence slider
    sliderInput("ci",
                "Confidence Intervals:",
                min = 80,
                max = 99,
                value = 90,
                step = 1)
    ),
  
  ## shows rendered output from shiny server
  verbatimTextOutput("summary",
                     placeholder = TRUE),
  # ## shows prediction output
  # tableOutput("preds"),
  
  ## plot one
  
  # layout_columns(
  #   plot_card("Regression model",
  #             plotOutput("plot1",
  #                        height = "30vh",
  #                        width = "30vh")),
  #   plot_card("Predicted % reduction",
  #             plotOutput("plot2",
  #                        height = "30vh",
  #                        width = "30vh"))
  # )
  
)


server <- function(input, output, session) {
  
  ## read data
  df <- read.csv("https://raw.githubusercontent.com/mps9506/test-webr-dashboard/main/data/data.csv",
                 colClasses = c("ValueID" = "character",
                                "StudyID" = "character",
                                "Pub_Year" = "factor",
                                "Parameter" = "factor",
                                "Source" = "factor",
                                "Source_Type" = "factor",
                                "BMP" = "factor",
                                "BMP_ID" = "factor",
                                "BMP_Class" = "factor",
                                "BMP_Subcat" = "factor",
                                "BMP_Category" = "factor",
                                "Scale" = "factor",
                                "Location" = "character",
                                "State" = "factor",
                                "Area" = "numeric",
                                "Latitude" = "numeric",
                                "Longitude" = "character",
                                "Data_Year" = "character",
                                "n" = "integer", 
                                "Pre" = "numeric",
                                "Post" = "numeric",
                                "Unit" = "character",
                                "X..Reduction" = "NULL",
                                "Log.Ratio" = "NULL"),
                 row.names = NULL)
  df <- df[!is.na(df$Pre) & !is.na(df$Post),]
  min_pre <- min(df$Pre, na.rm = TRUE)
  max_pre <- max(df$Pre, na.rm = TRUE)
  new_data <- data.frame(Pre = logseq(min_pre, max_pre, n = 100))
  #critical value from t-dist for 90% ci
  crit <- reactive({
    qnorm((1-(input$ci)/100)/2, lower.tail = FALSE) 
  })
  
  ## should seperate model data and model fit here:
  model_data <- reactive({
    model_data <- df[df$BMP_SubCat == input$subcat,]
  })
  
  ## fit lm
  model_output <- reactive({
    m1 <- lm(log(Post) ~ log(Pre),
             data = model_data())
    m1
  })
  
  ## generate prediction data and ci
  model_preds <- reactive({
    
    y <- predict(model_output(),
                 newdata = new_data,
                 se.fit = TRUE,
                 type = "response")
    y <- cbind(new_data, y)
    y$response <- exp(y$fit)
    y$lower <- exp(y$fit-crit()*y$se)
    y$upper <- exp(y$fit+crit()*y$se)
    y
  })
  
  ## p1 labels
  p1_lab <- reactive({
    if (input$param == "fib") {
      list(x = "Pre-treatment FIB (cfu/100mL)",
           y = "Post-Treatment FIB (cfu/100mL)")
    }
  })
  
  
  ## render model summary output
  output$summary <- renderPrint({ 
    summary(model_output())
  })
  
  ## render table out
  output$preds <- renderTable({
    model_preds()
  })
  
  
  
#   ## render plot 1
#   output$plot1 <- renderPlot({
#     p1 <- model_data() |> 
#       ggplot() +
#       geom_abline(slope = 1, linetype = "dotted", color = "grey30") +
#       geom_point(aes(Pre, Post)) +
#       geom_line(data = model_preds(),
#                 aes(Pre, response)) +
#       geom_ribbon(data = model_preds(),
#                   aes(x = Pre,
#                       ymin = lower,
#                       ymax = upper),
#                   alpha = 0.5) +
#       scale_x_log10(name = p1_lab()$x, 
#                     labels = scales::label_log(digits = 1)) +
#       scale_y_log10(name = p1_lab()$y,
#                     labels = scales::label_log(digits = 1)) +
#       coord_fixed(xlim = c(min_pre, max_pre),
#                   ylim = c(min_pre, max_pre))
#     p1
#   },
#   height = function() {
#     session$clientData$output_plot1_width
#   },
#   res = 100)
#   
#   ## render plot2
#   output$plot2 <- renderPlot({
#     p2 <- model_preds() |> 
#       ggplot() +
#       geom_ribbon(aes(Pre, ymin = (Pre-lower)/Pre,
#                       ymax = (Pre-upper)/Pre),
#                   alpha = 0.5) +
#       geom_line(aes(Pre, (Pre-response)/Pre)) +
#       scale_x_log10(name = p1_lab()$x,
#                     labels = scales::label_log(digits = 1)) +
#       scale_y_continuous(name = "Predicted % reduction",
#                          labels = scales::label_percent()) +
#       coord_cartesian()
#     
#     p2
#   },
#   height = function() {
#     session$clientData$output_plot2_width
#   },
#   res = 100)
# }

shinyApp(ui = ui, server = server)


```
