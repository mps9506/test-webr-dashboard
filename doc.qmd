---
title: "test-webr-dashboard"
author: "Penguin Friend"
format:
  html:
    grid: 
      body-width: 1300px
    resources: 
      - shinylive-sw.js
filters: 
  - shinylive
---





```{shinylive-r}
#| standalone: true
#| viewerHeight: 800
library(shiny)
library(bslib)

##functions
linspace <- function(x1, x2, n = 100) {
  stopifnot(is.numeric(x1), is.numeric(x2), length(x1) == 1, 
            length(x2) == 1)
  n <- floor(n)
  if (n <= 1) 
    x2
  else seq(x1, x2, length.out = n)
}

logseq <- function(x1, x2, n = 100) {
    x <- linspace(log(abs(x1)), log(abs(x2)), n)
    exp(x)
}

ui <- page_sidebar(
  ## input selection
  sidebar = sidebar(
    selectInput("subcat",
                "BMP Category:",
                c("Crop Management" = "Cropland",
                  "Detention" = "Detention",
                  "Drainage" = "Drainage",
                  "Filtration" = "Filtration",
                  "Infiltration" = "Infiltration",
                  "Livestock Management" = "Livestock",
                  "Treatment" = "Treatment"),
                selected = "Livestock")),
  ## shows rendered output from shiny server
  verbatimTextOutput("summary",
                     placeholder = TRUE),
  ## shows prediction output
  tableOutput("preds"),
  
  ## plot one
  plotOutput("plot1",
             width = "50%")
  
)


server <- function(input, output) {
  
  ## read data
  df <- read.csv("https://raw.githubusercontent.com/mps9506/test-webr-dashboard/main/data/data.csv",
                 colClasses = c("ValueID" = "character",
                                "StudyID" = "character",
                                "Pub_Year" = "factor",
                                "Parameter" = "factor",
                                "Source" = "factor",
                                "Source_Type" = "factor",
                                "BMP" = "factor",
                                "BMP_ID" = "factor",
                                "BMP_Class" = "factor",
                                "BMP_Subcat" = "factor",
                                "BMP_Category" = "factor",
                                "Scale" = "factor",
                                "Location" = "character",
                                "State" = "factor",
                                "Area" = "numeric",
                                "Latitude" = "numeric",
                                "Longitude" = "character",
                                "Data_Year" = "character",
                                "n" = "integer", 
                                "Pre" = "numeric",
                                "Post" = "numeric",
                                "Unit" = "character",
                                "X..Reduction" = "NULL",
                                "Log.Ratio" = "NULL"),
                 row.names = NULL)
  df <- df[!is.na(df$Pre) & !is.na(df$Post),]
  min_pre <- min(df$Pre, na.rm = TRUE)
  max_pre <- max(df$Pre, na.rm = TRUE)
  new_data <- data.frame(Pre = logseq(min_pre, max_pre, n = 100))
  #critical value from t-dist for 90% ci
  crit <- qnorm(0.05, lower.tail = FALSE) 

  ## should seperate model data and model fit here:
  model_data <- reactive({
    model_data <- df[df$BMP_SubCat == input$subcat,]
  })
  
  ## fit lm
  model_output <- reactive({
    m1 <- lm(log(Post) ~ log(Pre),
             data = model_data())
    m1
  })
  
  ## generate prediction data and ci
  model_preds <- reactive({
    
    y <- predict(model_output(),
            newdata = new_data,
            se.fit = TRUE,
            type = "response")
    y <- cbind(new_data, y)
    y$response <- exp(y$fit)
    y$lower <- exp(y$fit-crit*y$se)
    y$upper <- exp(y$fit+crit*y$se)
    y
  })
  
  ## plot model fits and study estimates
  # plot1 <- reactive({
  #   # lines(model_preds()$Pre,
  #   #       model_preds()$response,
  #   #       log = “xy”)
  #   plot(model_data()$Pre,
  #        model_data()$Post)
  # })
  
  ## render model summary output
  output$summary <- renderPrint({ 
    summary(model_output())
  })
  
  ## render table out
  output$preds <- renderTable({
    model_preds()
  })
  
  ## render plot
  out$plot1 <- renderPlot({
    plot(model_data()$Pre,
         model_data()$Post)
  })
}

shinyApp(ui = ui, server = server)



```
